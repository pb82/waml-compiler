export enum TOKEN_TYPE {
    LPAREN,
    RPAREN,
    LBRACKET,
    RBRACKET,
    LSQUARE,
    RSQUARE,
    COMMA,
    ARROW,
    COLON,
    STRING,
    NUMBER,
    NAME,
    CLASS,
    ADD,
    SUBTRACT,
    MULTIPLY,
    DIVIDE,
    BUILTIN,
    BOOLEAN,
};

export const QUOTATION_MARK = '"';

export const TOKEN_CHAR_MAPPING: {[key: string]: TOKEN_TYPE} = {
    "(": TOKEN_TYPE.LPAREN,
    ")": TOKEN_TYPE.RPAREN,
    "{": TOKEN_TYPE.LBRACKET,
    "}": TOKEN_TYPE.RBRACKET,
    "[": TOKEN_TYPE.LSQUARE,
    "]": TOKEN_TYPE.RSQUARE,
    ":": TOKEN_TYPE.COLON,
    ",": TOKEN_TYPE.COMMA,
    ">": TOKEN_TYPE.ARROW,
    "+": TOKEN_TYPE.ADD,
    "-": TOKEN_TYPE.SUBTRACT,
    "*": TOKEN_TYPE.MULTIPLY,
    "/": TOKEN_TYPE.DIVIDE,
};

export const TOKEN_HUMAN_READABLE: Map<TOKEN_TYPE, string> = new Map();
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.LPAREN, "(");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.RPAREN, ")");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.LBRACKET, "{");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.RBRACKET, "}");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.LSQUARE, "[");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.RSQUARE, "]");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.COMMA, ",");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.ARROW, ">");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.COLON, ":");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.STRING, "<string>");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.NUMBER, "<number>");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.NAME, "<reference>");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.CLASS, "<definition>");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.ADD, "+");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.SUBTRACT, "-");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.MULTIPLY, "*");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.DIVIDE, "/");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.BUILTIN, "<builtin>");
TOKEN_HUMAN_READABLE.set(TOKEN_TYPE.BOOLEAN, "<boolean>");

export const TOKEN_CHARS = Object.keys(TOKEN_CHAR_MAPPING);
